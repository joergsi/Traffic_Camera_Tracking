import cv2
import numpy as np
 
def projectPoint(x, y, h, to_round=False):
    p = np.array((x,y,1)).reshape((3,1))
    temp_p = h.dot(p)
    sum = np.sum(temp_p ,1)
    if to_round:
        px = round(sum[0]/sum[2], -5)
        py = round(sum[1]/sum[2], -5)
    else:
        px = sum[0]/sum[2]
        py = sum[1]/sum[2]
    return px, py

def getError(src_pts, target_pts, h):
    
if __name__ == '__main__' :
    # camera points
    pts_src = np.array([
        [244,	174],
        [224,	230],
        [135,	374],
        [339,	433],
        [297,	495],
        [410,	800],
        [678,	740],
        [682,	871],
        # [776,	1050],
        [851,	692],
        [1022,	693],
        [1052,	898],
        [1364,	477],
        [1527,	474],
        [1549,	570],
        [1185,	530],
        [1207,	451],
        [1362,	404],
        [1567,	419],
        [1549,	336],
        [1252,	222],
        [1241,	294],
        [1074,	246],
        [1060,	296],
        [941,	236],
        [925,	271],
        [899,	328],
        [806,	514],
        [857,	414],
        [612,	508],
        [1149,	58],
        [1050,	47],
        [852, 53]
    ])
 
    # Map long, lat
    pts_dst = np.array([
        [48.7755537320585, 11.4251618004278],
        [48.77556477958027, 11.425100109620338],
        [48.775444582411495, 11.424962646408337],
        [48.775351782930436, 11.424975386901176],
        [48.775333664916495, 11.424929789347853],
        [48.77519534912667, 11.424816466017038],
        [48.775150274890656, 11.424890897317315],
        [48.77511845775853, 11.424838594241443],
        # [48,775064, 11,424798],
        [48.77512155109042, 11.424941859288717],
        [48.77508973394008, 11.424987456842038],
        [48.77504377579844, 11.424891567869613],
        [48.77504996247188, 11.425163812084715],
        [48.77501019097409, 11.425194657488433],
        [48.774989421401635, 11.425134978337763],
        [48.77508089583725, 11.42509541575473],
        [48.775094594893, 11.425148389382857],
        [48.775065429156946, 11.42521276239931],
        [48.775009749068396, 11.425240255041755],
        [48.77503228625442, 11.425309321923864],
        [48.77514894917565, 11.425354919477035],
        [48.7751290634699, 11.425283840938034],
        [48.77519888435757, 11.425293899221854],
        [48.77518430152196, 11.425242937250493],
        [48.7752483775862, 11.42527646486323],
        [48.775237771898475, 11.42523824338471],
        [48.77522142145879, 11.425179234786295],
        [48.77518120819303, 11.425028360529145],
        [48.775200651974096, 11.425103462381678],
        [48.77524616806848, 11.425031713290421],
        [48.77526055916223, 11.425536836694087],
        [48.77530740091163, 11.425533483932815],
        [48.77539268813839, 11.425481180857041]
    ])
    # 48.77, 11.42
    pts_dst_decimal = np.array([
        [5.55373205850, 5.16180042780],
        [5.56477958027, 5.10010962033],
        [5.44458241150, 4.96264640833],
        [5.35178293044, 4.97538690117],
        [5.33366491650, 4.92978934785],
        [5.19534912667, 4.81646601703],
        [5.15027489066, 4.89089731731],
        [5.11845775853, 4.83859424144],
        # [48,775064, 11,424798],
        [5.12155109042, 4.94185928871],
        [5.08973394008, 4.98745684203],
        [5.04377579844, 4.89156786961],
        [5.04996247188, 5.16381208472],
        [5.01019097409, 5.19465748843],
        [4.98942140164, 5.13497833776],
        [5.08089583725, 5.09541575473],
        [5.09459489300, 5.14838938286],
        [5.06542915695, 5.21276239931],
        [5.00974906840, 5.24025504176],
        [5.03228625442, 5.30932192386],
        [5.14894917565, 5.35491947704],
        [5.12906346990, 5.28384093803],
        [5.19888435757, 5.29389922185],
        [5.18430152196, 5.24293725049],
        [5.24837758620, 5.27646486323],
        [5.23777189848, 5.23824338471],
        [5.22142145879, 5.17923478630],
        [5.18120819303, 5.02836052915],
        [5.20065197409, 5.10346238168],
        [5.24616806848, 5.03171329042],
        [5.26055916223, 5.53683669409],
        [5.30740091163, 5.53348393282],
        [5.39268813839, 5.48118085704]
    ])
 
    # print(pts_dst.dtype)
    pts_dst_f32 = np.float32(pts_dst)
    pts_dst_decimal_f32 = np.float32(pts_dst_decimal)
    pts_src_f32 = np.float32(pts_src)
    # print(pts_dst_f32, pts_dst_f32.dtype, pts_src_f32.dtype)
    
    # Calculate Homography
    h1, status = cv2.findHomography(pts_src_f32, pts_dst_decimal_f32)
    print(h1)
    print(projectPoint(1060, 692, h1))

    h2, status = cv2.findHomography(pts_src_f32, pts_dst_f32)
    print(h2)
    print(projectPoint(851, 692, h2))
    # # Warp source image to destination based on homography
    # im_out = cv2.warpPerspective(im_src, h, (im_dst.shape[1],im_dst.shape[0]))
 
    # # Display images
    # cv2.imshow("Source Image", im_src)
    # cv2.imshow("Destination Image", im_dst)
    # cv2.imshow("Warped Source Image", im_out)
 
    # cv2.waitKey(0)